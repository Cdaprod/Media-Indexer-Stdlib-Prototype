########################################################################
# Root "/docker-compose.anchors.yaml"
########################################################################
name: thatdamtoolbox
version: "3.9"

########################################################################
# YAML Anchors (Reusable Configuration)
########################################################################
x-common: &common
  restart: unless-stopped

x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: "10m"
      max-file: "3"

x-health: &health
  interval: 30s
  timeout: 5s
  retries: 3

x-limits-small: &limits-small
  mem_limit: 512m
  cpus: 0.5

x-limits-medium: &limits-medium
  mem_limit: 1500m
  cpus: 1.0

x-net-bridge: &net-bridge
  networks: [damnet]

x-net-host: &net-host
  network_mode: host          # owns the host’s net-ns

x-platform-arm64: &arm64
  platform: linux/arm64

x-user: &uid1000
  user: "1000:1000"

# ---------- shared env blocks ----------
x-env-video: &env-video
  TZ: "America/New_York"
  VIDEO_MODE: "api"
  PYTHONWARNINGS: |
    ignore::DeprecationWarning,
    ignore::UserWarning:google.protobuf.runtime_version
  XDG_CACHE_HOME: /data/cache
  HF_HOME:        /data/cache/huggingface
  TORCH_HOME:     /data/cache/torch

x-env-amqp: &env-amqp
  AMQP_URL:          "amqp://video:video@rabbitmq:5672/"
  EVENT_BROKER_URL:  "amqp://video:video@rabbitmq:5672/"

x-env-video-data: &env-video-data
  VIDEO_DATA_DIR:       /data
  VIDEO_MEDIA_ROOT:     /data/media
  VIDEO_PROCESSED_ROOT: /data/_PROCESSED
  VIDEO_PREVIEW_ROOT:   /data/previews
  VIDEO_LOG_DIR:        /data/logs
  VIDEO_DB_PATH:        /var/lib/thatdamtoolbox/db/live.sqlite3
  DB_SNAPSHOT_SECS:     "120"
  VIDEO_STORAGE:        "auto"
  VIDEO_DEBUG_BOOT:     "0"

# ---------- common volume sets ----------
x-vol-video: &vol-video
  - "${DATA_ROOT:-./data}:/data:rw"
  - "${INCOMING_ROOT:-./incoming}:/data/_INCOMING:rw"
  - db_wal:/var/lib/thatdamtoolbox/db:rw

x-vol-dev: &vol-dev
  - /app/node_modules            # anonymous
  - /app/.next

# ---------- RabbitMQ defaults ----------
x-rabbit-creds: &rabbit-creds
  RABBITMQ_DEFAULT_USER: video
  RABBITMQ_DEFAULT_PASS: video
  RABBITMQ_DEFAULT_VHOST: /

# ---------- Next.js ⇆ API URLs ----------
x-env-bridge-api: &env-bridge-api
  NEXT_PUBLIC_API_BASE_URL: "http://video-api:8080"
  NEXT_PUBLIC_WS_URL:       "ws://video-api:8080/ws/camera"

########################################################################
# Network Bridge "damnet"
########################################################################
networks:
  damnet:
    driver: bridge

########################################################################
# Services
########################################################################
services:
  ######################################################################
  # 0. one-shot host configurator (profile: setup)
  ######################################################################
  hotspot-installer:
    image: thatdam-hotspot-installer:latest
    privileged: true
    <<: *net-host                 # needs wlan0
    profiles: ["setup"]
    environment:
      SETUP_TOKEN_FILE: /run/secrets/dam_token
    secrets:
      - source: dam_ephemeral_token
        target: dam_token
    restart: "no"

  ######################################################################
  # 1. public front-door gateway (ports 80 / 443 on the host)
  ######################################################################
  gw:
    build:
      context: docker/nginx       # contains Dockerfile + nginx.tmpl
    container_name: thatdam-gateway
    <<: [*net-host, *common, *logging]
    depends_on:
      video-api:
        condition: service_healthy
      video-web:
        condition: service_started
    environment:
      # because gw is in host-net, it reaches backends on 127.0.0.1:*
      API_HOST: "127.0.0.1"
      API_PORT: "8080"
      WEB_HOST: "127.0.0.1"
      WEB_PORT: "3000"
    volumes:
      - ./docker/nginx/nginx.tmpl:/etc/nginx/nginx.tmpl:ro
      - ./docker/nginx/html:/usr/share/nginx/html:ro   # optional static export

  ######################################################################
  # 2. infra – RabbitMQ
  ######################################################################
  rabbitmq:
    image: rabbitmq:3.13-alpine
    container_name: thatdamtoolbox-rabbitmq
    <<: [*common, *net-bridge, *logging]
    hostname: rabbitmq
    environment: *rabbit-creds
    ports: ["5672:5672", "15672:15672"]          # 15672 = mgmt UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      <<: *health
      test: ["CMD", "rabbitmq-diagnostics", "ping"]

  ######################################################################
  # 3. capture daemon (needs /dev, v4l2)
  ######################################################################
  capture-daemon:
    build:
      context: ./host/services/capture-daemon
    image: cdaprod/video-capture-daemon:latest
    container_name: thatdamtoolbox-capture-daemon
    <<: [*net-bridge, *common, *logging]
    privileged: true            # v4l2
    pid: host
    environment:
      <<: *env-amqp
      REGISTRY_URL: "docker.io/cdaprod/capture-daemon:latest"
    volumes:
      - /dev:/dev
      - /lib/modules:/lib/modules:ro
      - ./data/modules/hwcapture/records:/records
    healthcheck:
      <<: *health
      test: ["CMD", "curl", "-sf", "http://localhost:9000/devices"]
      timeout: 3s
    depends_on:
      rabbitmq:
        condition: service_healthy

  ######################################################################
  # 4. FastAPI back-end
  ######################################################################
  video-api:
    build: .
    image: cdaprod/video:dev
    container_name: thatdamtoolbox-video-api
    <<: [*arm64, *net-bridge, *uid1000, *common, *logging, *limits-medium]
    ports: ["8080:8080"]         # bridge->host publish
    device_cgroup_rules: ["c 81:* rmw"]
    group_add: ["44"]            # video group (Pi OS)
    cap_add:   ["SYS_ADMIN"]
    environment:
      <<: [*env-video, *env-video-data, *env-amqp]
      UVICORN_WORKERS: "1"
      VIDEO_FORCE_STDHTTP: "0"
      CAPTURE_REGISTRY_URL: "http://capture-daemon:9000"
    volumes:
      <<: *vol-video
      - /dev:/dev:rw,rshared      # hot-reload / v4l2 access
      - ./video:/video:rw
    command: ["serve", "--host", "0.0.0.0", "--port", "8080"]
    healthcheck:
      <<: *health
      test: ["CMD-SHELL", "curl -fs http://localhost:8080/health || exit 1"]
    depends_on:
      capture-daemon:
        condition: service_healthy

  ######################################################################
  # 5. Next.js dev server (dev only)
  ######################################################################
  video-web:
    build:
      context: ./docker/web-app
      target: development
    image: cdaprod/video-web:dev
    container_name: thatdamtoolbox-video-web-app
    <<: [*arm64, *net-bridge, *common, *logging, *limits-small]
    ports: ["3000:3000"]
    environment:
      NODE_ENV: development
      <<: *env-bridge-api         # talk to video-api via service-DNS
      WATCHPACK_POLLING: "true"
      CHOKIDAR_USEPOLLING: "true"
    volumes:
      - ./docker/web-app:/app:rw
      <<: *vol-dev
    depends_on:
      - video-api
    healthcheck:
      <<: *health
      test: ["CMD-SHELL", "curl -fs http://localhost:3000/api/health || exit 1"]

  ######################################################################
  # 6. optional CLI job
  ######################################################################
  video-cli:
    image: cdaprod/video:dev
    container_name: thatdamtoolbox-video-cli-ephemeral
    profiles: ["hydrate-backend", "cli"]
    <<: [*net-bridge, *logging]
    entrypoint: ["python", "-m", "video"]
    command: ["scan", "--root", "/data/_INCOMING", "--workers", "1"]
    volumes:
      - /mnt/b/Video/thatdamtoolbox:/data:rw
      - /mnt/b/Video/_INCOMING:/data/_INCOMING:rw
      - db_wal:/var/lib/thatdamtoolbox/db:rw
    restart: "no"

########################################################################
# Secret & Volume declarations
########################################################################
secrets:
  dam_ephemeral_token:
    file: ./secrets/dam_token.txt   # ignored by .gitignore /.dockerignore

volumes:
  db_wal:
  rabbitmq_data:
name: CI-Go-Quality-Gates

on:
  pull_request:
    paths:
      - "host/services/**"
      - "go.mod"
      - "go.sum"
      - "**/*.go"
  push:
    branches: ["**"]
    paths:
      - "host/services/**"
      - "go.mod"
      - "go.sum"
      - "**/*.go"
  workflow_dispatch:

jobs:
  go-qg:
    name: Lint • Vet • Vulnerabilities • Test (-race) • Coverage
    runs-on: ubuntu-latest
    env: { GO_VERSION: "1.22.x" }

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: true

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Enforce formatting (gofmt -s)
        run: |
          files=$(gofmt -s -l . | grep -E '\.go$' || true)
          if [ -n "$files" ]; then
            echo "The following files are not gofmt -s clean:"
            echo "$files"
            exit 1
          fi

      - name: go vet
        run: go vet ./...

      - name: staticcheck
        uses: dominikh/staticcheck-action@v1.4.0
        with:
          version: "latest"
          install-go: false

      - name: errcheck
        run: |
          go install github.com/kisielk/errcheck@latest
          errcheck ./...

      - name: govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Unit tests (race, shuffle) + coverage
        run: |
          go test ./... \
            -race \
            -shuffle=on \
            -count=1 \
            -coverprofile=coverage.out \
            -covermode=atomic

      - name: Upload coverage to summary
        run: |
          go tool cover -func=coverage.out | tee coverage.txt
          pct=$(go tool cover -func=coverage.out | awk '/total:/ {print $3}' | sed 's/%//')
          echo "## Coverage" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`\n$(cat coverage.txt)\n\`\`\`" >> $GITHUB_STEP_SUMMARY
          awk -v PCT="$pct" 'BEGIN { if (PCT < 60.0) exit 1 }'

      - name: Build with hardening flags
        run: |
          for pkg in $(go list ./... | grep '/cmd/' || true); do
            out="bin/$(basename "$pkg")"
            mkdir -p bin
            CGO_ENABLED=0 go build -trimpath -buildvcs=true -ldflags="-s -w" -o "$out" "$pkg"
          done
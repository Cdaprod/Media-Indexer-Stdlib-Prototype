##############################################################################
# Dockerfile – multi-arch image for the "video" Media-Bridge / DAM toolbox 🐳
##############################################################################

########################################
# Stage 0 – Build the React ESM bundle #
########################################
FROM node:18-alpine AS frontend-build
WORKDIR /build

RUN npm install --location=global esbuild

# copy raw component
COPY video/web/static/components/dam-explorer.js ./src/

# bundle → dam-explorer.bundle.js (ES2022, minified)
# --- in the frontend-build stage ---
RUN esbuild ./src/dam-explorer.js \
    --bundle \
    --loader:.js=jsx \
    --loader:.json=json \
    --outfile=dam-explorer.bundle.js \
    --format=esm \
    --target=es2022 \
    --minify

############################
# Stage 1 – Base OS image  #
############################
FROM python:3.11-slim-bookworm AS base
LABEL maintainer="cdaprod.dev" \
      org.opencontainers.image.version="0.1.0"

ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    TERM=xterm-256color \
    SHELL=/bin/bash

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential git curl wget ca-certificates \
        ffmpeg libgl1 libglib2.0-0 \
        bash bash-completion zsh locales tmux \
        neovim htop less tree ripgrep fd-find fzf \
        bat exa jq unzip gnupg sqlite3 \
        software-properties-common apt-transport-https \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && locale-gen
ENV LANG=en_US.UTF-8 LANGUAGE=en_US:en LC_ALL=en_US.UTF-8

###############################
# Stage 2 – Dev shell goodies #
###############################
FROM base AS devshell

# 1. non-root user
RUN useradd -ms /bin/zsh appuser
USER appuser
WORKDIR /home/appuser

# 2. Oh My Zsh (unattended)
RUN sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended

# 3. zsh plugins
RUN git clone https://github.com/zsh-users/zsh-autosuggestions      ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions && \
    git clone https://github.com/zsh-users/zsh-syntax-highlighting  ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting && \
    git clone https://github.com/zsh-users/zsh-completions          ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-completions

# 4. full .zshrc tweaks  ---------- (all your original lines kept verbatim)
RUN sed -i 's/ZSH_THEME="robbyrussell"/ZSH_THEME="agnoster"/' ~/.zshrc && \
    sed -i 's/plugins=(git)/plugins=(git zsh-autosuggestions zsh-syntax-highlighting zsh-completions docker docker-compose python pip fzf tmux)/' ~/.zshrc && \
    echo '' >> ~/.zshrc && \
    echo '# Enhanced zsh configuration' >> ~/.zshrc && \
    echo 'export HISTSIZE=10000' >> ~/.zshrc && \
    echo 'export HISTFILESIZE=20000' >> ~/.zshrc && \
    echo 'export SAVEHIST=10000' >> ~/.zshrc && \
    echo 'setopt HIST_IGNORE_DUPS' >> ~/.zshrc && \
    echo 'setopt HIST_IGNORE_ALL_DUPS' >> ~/.zshrc && \
    echo 'setopt HIST_FIND_NO_DUPS' >> ~/.zshrc && \
    echo 'setopt HIST_SAVE_NO_DUPS' >> ~/.zshrc && \
    echo 'setopt SHARE_HISTORY' >> ~/.zshrc && \
    echo 'setopt APPEND_HISTORY' >> ~/.zshrc && \
    echo 'setopt INC_APPEND_HISTORY' >> ~/.zshrc && \
    echo 'export EDITOR=nvim' >> ~/.zshrc && \
    echo 'export VISUAL=nvim' >> ~/.zshrc && \
    echo 'alias ll="ls -alF"' >> ~/.zshrc && \
    echo 'alias la="ls -A"' >> ~/.zshrc && \
    echo 'alias l="ls -CF"' >> ~/.zshrc && \
    echo 'alias vim=nvim' >> ~/.zshrc && \
    echo 'alias vi=nvim' >> ~/.zshrc && \
    echo 'alias cat=bat' >> ~/.zshrc && \
    echo 'alias find=fd' >> ~/.zshrc && \
    echo 'alias grep=rg' >> ~/.zshrc && \
    echo 'alias top=htop' >> ~/.zshrc && \
    echo 'alias cls=clear' >> ~/.zshrc && \
    echo 'alias ..="cd .."' >> ~/.zshrc && \
    echo 'alias ...="cd ../.."' >> ~/.zshrc && \
    echo 'alias ....="cd ../../.."' >> ~/.zshrc && \
    echo 'alias ~="cd ~"' >> ~/.zshrc && \
    echo 'alias reload="source ~/.zshrc"' >> ~/.zshrc && \
    echo '' >> ~/.zshrc && \
    echo '# FZF configuration' >> ~/.zshrc && \
    echo 'export FZF_DEFAULT_COMMAND="fd --type f --hidden --follow --exclude .git"' >> ~/.zshrc && \
    echo 'export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"' >> ~/.zshrc && \
    echo 'export FZF_ALT_C_COMMAND="fd --type d --hidden --follow --exclude .git"' >> ~/.zshrc && \
    echo '' >> ~/.zshrc && \
    echo '# Auto-completion for zsh-completions' >> ~/.zshrc && \
    echo 'autoload -U compinit && compinit' >> ~/.zshrc

# 5. bash fallback tweaks
RUN echo '# Enhanced bash configuration' >> ~/.bashrc && \
    echo 'export HISTSIZE=10000' >> ~/.bashrc && \
    echo 'export HISTFILESIZE=20000' >> ~/.bashrc && \
    echo 'export HISTCONTROL=ignoredups:erasedups' >> ~/.bashrc && \
    echo 'shopt -s histappend' >> ~/.bashrc && \
    echo 'shopt -s checkwinsize' >> ~/.bashrc && \
    echo 'shopt -s cdspell' >> ~/.bashrc && \
    echo 'bind "set completion-ignore-case on"' >> ~/.bashrc && \
    echo 'bind "set show-all-if-ambiguous on"' >> ~/.bashrc && \
    echo 'export EDITOR=nvim' >> ~/.bashrc && \
    echo 'export VISUAL=nvim' >> ~/.bashrc && \
    echo 'alias ll="ls -alF"' >> ~/.bashrc && \
    echo 'alias la="ls -A"' >> ~/.bashrc && \
    echo 'alias l="ls -CF"' >> ~/.bashrc && \
    echo 'alias vim=nvim' >> ~/.bashrc && \
    echo 'alias vi=nvim' >> ~/.bashrc && \
    echo 'if [ -f /etc/bash_completion ]; then . /etc/bash_completion; fi' >> ~/.bashrc

USER root
# 6. minimal nvim config
RUN mkdir -p /home/appuser/.config/nvim && \
    echo 'set number relativenumber'             >  /home/appuser/.config/nvim/init.vim && \
    echo 'set expandtab tabstop=4 shiftwidth=4' >> /home/appuser/.config/nvim/init.vim && \
    echo 'syntax on'                            >> /home/appuser/.config/nvim/init.vim
RUN chown -R appuser:appuser /home/appuser

#############################################
# Stage 3 – Builder: create a venv in /video #
#############################################
FROM devshell AS builder
USER appuser
WORKDIR /video

# copy only what setup.py needs
COPY --chown=appuser:appuser setup.py requirements.txt README.md ./
COPY --chown=appuser:appuser video/ video/

# 1) Create venv, install your package
RUN python3 -m venv /video/venv \
 && /video/venv/bin/pip install --upgrade pip \
 && /video/venv/bin/pip install --no-cache-dir -r requirements.txt \
 && /video/venv/bin/pip install --no-cache-dir -e .

# 2) (Optional) install module‐specific requirements
RUN set -e; \
  cd video/modules; \
  find . -name requirements.txt -print0 | xargs -0 cat | sort -u > /tmp/extra.txt; \
  [ -s /tmp/extra.txt ] && /video/venv/bin/pip install --no-cache-dir -r /tmp/extra.txt

#############################################
# Stage 4 – Runtime: reuse that venv
#############################################
FROM devshell AS runtime
USER appuser
WORKDIR /video

# 1) Copy over the entire /video tree (venv + your code)
COPY --from=builder --chown=appuser:appuser /video /video

# 2) Make the venv’s bin the first thing on PATH
ENV PATH="/video/venv/bin:${PATH}"

# 3) Bring in your React bundle
COPY --from=frontend-build \
     /build/dam-explorer.bundle.js \
     /video/web/static/components/

# 5) Runtime‐only ENV overrides
ENV VIDEO_DATA_DIR=/var/lib/thatdamtoolbox \
    VIDEO_DB_PATH=/var/lib/thatdamtoolbox/db/live.sqlite3 \
    VIDEO_MEDIA_ROOT=/var/lib/thatdamtoolbox/media \
    VIDEO_PROCESSED_DIR=/var/lib/thatdamtoolbox/_PROCESSED \
    VIDEO_PREVIEW_ROOT=/var/lib/thatdamtoolbox/previews \
    VIDEO_LOG_DIR=/var/lib/thatdamtoolbox/logs \
    VIDEO_TMP_DIR=/var/lib/thatdamtoolbox/tmp \
    VIDEO_INCOMING_DIR=/var/lib/thatdamtoolbox/_INCOMING

EXPOSE 8080

# ── Runtime behaviour ───────────────────────────────────────────────────────
# By default we rely on the smart launcher in `video/__main__.py`:
#   • `docker run …`  → API server on :8080
#   • `docker run … stats` → CLI pass-through
ENTRYPOINT ["python", "-m", "video"]

# You can still override at run-time:
#   FASTAPI=0 docker run …        → forces stdlib HTTP server
#   python -m video serve --port 8888 … inside container for custom port
#
# Keep CMD empty so positional args go straight into ENTRYPOINT
CMD []
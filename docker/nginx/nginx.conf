# docker/nginx.conf
user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    ## Basic optimizations
    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    ## Gzip compression for text-based assets
    gzip                on;
    gzip_vary           on;
    gzip_min_length     1000;
    gzip_proxied        any;
    gzip_comp_level     5;
    gzip_types          text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    ## Upstream backends
    upstream video_api {
        server video-api:8080;    # your Docker service name
    }
    upstream video_web {
        server video-web:3000;    # your Docker service name
    }

    server {
        listen       80;
        server_name  _;            # catch-all

        # Healthcheck (optional)
        location = /health {
            proxy_pass         http://video_api/health;
            proxy_set_header   Host $host;
        }

        # API calls → video_api
        location /api/ {
            proxy_pass         http://video_api;
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection $http_connection;
            proxy_set_header   Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # WebSocket control (e.g. /ws/camera) → video_api
        location /ws/ {
            proxy_pass         http://video_api;
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection "Upgrade";
            proxy_set_header   Host $host;
        }

        # MJPEG / streaming endpoints → video_api
        location /stream/ {
            proxy_pass         http://video_api;
            proxy_http_version 1.1;
            proxy_set_header   Host $host;
            proxy_buffering    off;
            proxy_cache        off;
        }

        # Fallback to frontend
        location / {
            # If you build your Next.js app into static files:
            root   /usr/share/nginx/html;
            try_files $uri $uri/ @proxy_frontend;
        }

        # Proxy any other requests (e.g. SSR dev server) → video_web
        location @proxy_frontend {
            proxy_pass         http://video_web;
            proxy_http_version 1.1;
            proxy_set_header   Upgrade $http_upgrade;
            proxy_set_header   Connection $http_connection;
            proxy_set_header   Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        ## Optional: increase body size if uploading
        client_max_body_size 100M;
    }
}
# /docker-compose.prod.yaml
name: That DAM Toolbox (Production)

services:
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    container_name: minio
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # MinIO Console/UI
    volumes:
      - ./data/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Optional: Postgres for Weaviate (uncomment if needed)
  # postgres:
  #   image: postgres:15
  #   environment:
  #     POSTGRES_USER: weaviate
  #     POSTGRES_PASSWORD: weaviate
  #     POSTGRES_DB: weaviate
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - ./data/postgres:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "weaviate"]
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3

  weaviate:
    image: semitechnologies/weaviate:latest
    container_name: weaviate_server
    command:
      - --host
      - 0.0.0.0
      - --port
      - '8080'
      - --scheme
      - http
    ports:
      - "8081:8080"     # External:Internal (change if you have port conflict)
      - "50051:50051"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      DEFAULT_VECTORIZER_MODULE: 'none'
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      ENABLE_MODULES: 'backup-s3'
      BACKUP_S3_BUCKET: 'weaviate-backups'
      BACKUP_S3_ENDPOINT: 'http://minio:9000'
      BACKUP_S3_ACCESS_KEY_ID: 'minio'
      BACKUP_S3_SECRET_ACCESS_KEY: 'minio123'
      BACKUP_S3_USE_SSL: 'false'
      CLUSTER_HOSTNAME: 'node1'
      # POSTGRES_HOST: postgres             # Uncomment if using Postgres
      # POSTGRES_PASSWORD: weaviate
      # POSTGRES_USER: weaviate
      # POSTGRES_DB: weaviate
      # PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
    volumes:
      - ./data/weaviate:/var/lib/weaviate
    depends_on:
      minio:
        condition: service_healthy
      # postgres:                           # Uncomment if using Postgres
      #   condition: service_healthy

  video-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: cdaprod/video:prod
    platform: linux/arm64                   # Remove or change for x86_64 host
    environment:
      PYTHONWARNINGS: "ignore::DeprecationWarning"
      TZ: America/New_York
      UVICORN_WORKERS: "4"
      VIDEO_STORAGE: "auto"                     # Default; adapter auto-selects/combines
      WEAVIATE_URL: "http://localhost:8081"     # Only needed if using Weaviate
      # MINIO_ENDPOINT: "http://localhost:9000" # Optional if your code needs it
    network_mode: host            # Direct access (optionally use "bridge" and ports)
    # ports:                      # use if not network_mode: host
    #   - "8080:8080"
    device_cgroup_rules:
      - "c 81:* rmw"
    group_add:
      - "44"
    privileged: true
    volumes:
      - ./video:/workspace/video:rw
      - ./data/media:/media:rw
      - ./data/db:/workspace/db:rw
      - /mnt/b/Video/_INCOMING:/workspace/_INCOMING
      - /mnt/b/Video/thatdamtoolbox:/workspace/thatdamtoolbox
    restart: unless-stopped
    depends_on:
      minio:
        condition: service_healthy
      weaviate:
        condition: service_started

    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8080/health || exit 1"]
      interval: 60s
      timeout: 5s
      retries: 3

  # Optional: Reverse proxy for unified access (uncomment/configure as needed)
  # nginx:
  #   image: nginx:alpine
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   depends_on:
  #     - video-api
  #     - minio
  #     - weaviate

  # Optional: One-shot CLI side-car
  video-cli:
    image: cdaprod/video:prod
    entrypoint: ["python", "-m", "video"]
    command: ["stats"]
    volumes:
      - ./data/media:/media
      - ./data/db:/workspace/db
    depends_on:
      - video-api
    profiles: ["cli"]

#--- End of file ---